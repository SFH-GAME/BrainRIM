let settings = document.querySelector(".pop-up__container");
let comeback = document.querySelector(".pop-up__container2");
let restart = document.querySelector(".pop-up__container3");

let ResultsGameOver = document.querySelector(".results-gameover");

//–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É –≤—Å–ø–ª –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 
document.querySelector('.pop-up__cancel').onclick = function () {
   settings.style = 'visibility:hidden;';
};
//–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
document.querySelector('.linkToTheSettings').onclick = function () {
   settings.style = 'visibility:visible;';
};
//–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É –≤—Å–ø–ª –æ–∫–Ω–∞ –Ω–∞–∑–∞–¥
document.querySelector('.pop-up__cancel2').onclick = function () {
   comeback.style = 'visibility:hidden;';
};
//–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É –Ω–∞–∑–∞–¥
document.querySelector('.comeback-button').onclick = function () {
   comeback.style = 'visibility:visible;';
};
//–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –æ—Ç–º–µ–Ω—É –≤—Å–ø–ª –æ–∫–Ω–∞ —Ä–µ—Å—Ç–∞—Ä—Ç
document.querySelector('.pop-up__cancel3').onclick = function () {
   restart.style = 'visibility:hidden;';
};
//–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É —Ä–µ—Å—Ç–∞—Ä—Ç
document.querySelector('.linkToTheRestart').onclick = function () {
   restart.style = 'visibility:visible;';
};


const gameContainer = document.querySelector(".game-container");
const bestResBody = document.querySelector(".best-res__value");
const timerCountResultsValue = document.querySelector(".time-count");
const enemyCountResultsValue = document.querySelector(".moves-count");
const bestTimerCountResultsValue = document.querySelector(".best-time-count");
const bestEnemyCountResultsValue = document.querySelector(".best-moves-count");
const winOrLooseResultsValue = document.querySelector(".loose-win-value");
const score = document.querySelector("#score-num");
const BUTTON_START = document.querySelector('.button-start');
const livesCounter = document.getElementById("lives-count");
const timerDisplay = document.getElementById("timer");

let timerCount = 0;
let enemiesPassedCount = 0;
let isGameOver = false;
let enemySpeed = 3;
let enemyInterval = 1500;
let maxEnemies = 16;
let currentEnemies = 0;
let enemyIntervalId = null;

let winForResults = 0;
let looseForResults = 0;
let statusLoosOrWin = "";

let playerLives = 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π
let isSpeedBoostActive = false; // –§–ª–∞–≥ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤
const boostTypes = ["heart", "boost-container"]; // –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—É—Å—Ç—ã


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è AJAX-–∑–∞–ø—Ä–æ—Å–∞
function sendAjaxRequest(url, data) {
   $.ajax({
      url: url,
      type: 'POST',
      dataType: "json",
      data: data,
      success: function (response) {
         console.log(response);
      },
      error: function () {
         console.log('–û—à–∏–±–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–∞:', url);
      }
   });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞
function updateExperience() {
   sendAjaxRequest('/dataBase/controllers/bonusSystem/experience.php', {
      expUpForModeAjax: statusLoosOrWin === "win" ? 15 : 2
   });
}

// –ë–æ–Ω—É—Å –∑–∞ –ø–æ–±–µ–¥—É
function updateWinBonus() {
   sendAjaxRequest('/dataBase/controllers/bonusSystem/bonusForWin.php', { IqUpForModeAjax: 15 });
}

// –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ–∏–≥—Ä—ã—à
function updateLooseBonus() {
   sendAjaxRequest('/dataBase/controllers/bonusSystem/bonusForLoose.php', { IqUpForModeAjax: 2 });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
function saveGameResults() {
   sendAjaxRequest('/dataBase/resultsGames/resultsRuningGame.php', {
      win: winForResults,
      loose: looseForResults,
      time_sec: timerCount,
      enemiesPassed: enemiesPassedCount
   });
}

// –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞, c–º–µ—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
let offsetX = 0;
let offsetY = 0;

function movePlayerStart(event) {
   if (!event.touches.length) return;
   const touch = event.touches[0];
   const playerRect = player.getBoundingClientRect();
   // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–æ–π –∫–∞—Å–∞–Ω–∏—è –∏ –≤–µ—Ä—Ö–Ω–∏–º –ª–µ–≤—ã–º —É–≥–ª–æ–º –∏–≥—Ä–æ–∫–∞
   offsetX = touch.clientX - playerRect.left;
   offsetY = touch.clientY - playerRect.top;
}

function movePlayer(event) {
   if (!event.touches.length) return;
   const touch = event.touches[0];
   const x = touch.clientX - offsetX; // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
   const y = touch.clientY - offsetY; // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ
   const horizontalLimit = gameContainer.clientWidth - player.clientWidth;
   const verticalLimit = gameContainer.clientHeight - player.clientHeight;
   if (x > 0 && x < horizontalLimit && y > 0 && y < verticalLimit) {
      player.style.left = `${x}px`;
      player.style.top = `${y}px`;
   }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
player.addEventListener("touchstart", movePlayerStart);
gameContainer.addEventListener("touchmove", movePlayer);

// –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
function createEnemy() {
   if (currentEnemies >= maxEnemies || isGameOver) return;

   const enemy = document.createElement("div");
   enemy.classList.add("enemy");
   enemy.style.left = `${Math.random() * (gameContainer.clientWidth - 20)}px`;
   gameContainer.appendChild(enemy);
   moveEnemy(enemy);
   currentEnemies++;
}

// –î–≤–∏–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
function moveEnemy(enemy) {
    let enemyMoveInterval = setInterval(() => {
        if (isGameOver || !enemy.parentElement) {
            clearInterval(enemyMoveInterval);
            return;
        }

        const playerPosition = player.getBoundingClientRect();
        const enemyPosition = enemy.getBoundingClientRect();

        if (checkCollision(playerPosition, enemyPosition)) {
            handleEnemyCollision(enemy, enemyMoveInterval);
        } else if (enemyPosition.top >= gameContainer.clientHeight) {
            removeEnemy(enemy, enemyMoveInterval);
        } else {
            enemy.style.top = `${enemyPosition.top + enemySpeed}px`;
        }
    }, 20);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
function checkCollision(rect1, rect2) {
    return (
        rect1.bottom >= rect2.top &&
        rect1.top <= rect2.bottom &&
        rect1.right >= rect2.left &&
        rect1.left <= rect2.right
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –∏–≥—Ä–æ–∫–æ–º
function handleEnemyCollision(enemy, interval) {
    if (playerLives > 1) {
        playerLives--;
        updateLivesDisplay();
        console.log(`üí• –ü–æ—Ç–µ—Ä—è –∂–∏–∑–Ω–∏! –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: ${playerLives}`);
    } else {
        gameOver();
    }
    clearInterval(interval);
    enemy.remove();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
function removeEnemy(enemy, interval) {
    enemy.remove();
    clearInterval(interval);
    enemiesPassedCount++;
    updateScore();
    currentEnemies--;
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function updateScore() {
   score.innerHTML = `${enemiesPassedCount}`;
}

// –ü–æ–≤—ã—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function increaseDifficulty() {
   if (timerCount > 0 && timerCount % 10 === 0) {
      enemySpeed += 1.5;
      if (enemyInterval > 400) {
         enemyInterval -= 400;
         clearInterval(enemyIntervalId);
         enemyIntervalId = setInterval(createEnemy, enemyInterval);
      }
      maxEnemies += 2;
   }
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
function startGame() {
   isGameOver = false;
   timerCount = 0;
   enemiesPassedCount = 0;
   enemySpeed = 3;
   enemyInterval = 1500;
   maxEnemies = 16;
   updateScore();
   updateLivesDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –∂–∏–∑–Ω–∏
   updateTimerDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å—Ç–∞—Ä—Ç–µ

   player.style.left = "50%";
   player.style.top = "90%";

   let gameTimer = setInterval(() => {
      if (isGameOver) {
         clearInterval(gameTimer);
         return;
      }
      timerCount++;
	  updateTimerDisplay(); // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
	  increaseDifficulty();
  }, 1000);

   enemyIntervalId = setInterval(createEnemy, enemyInterval);
   createEnemy();
}

// –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
function gameOver() {
   isGameOver = true;
   clearInterval(enemyIntervalId);
   enemySpeed = 0;
   showMessageLoose();
   statusLoosOrWin = "loose";
   looseForResults = 1;
   updateLooseBonus();
   updateExperience();
   saveGameResults();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showMessageLoose() {
   ResultsGameOver.style.display = 'block';
   timerCountResultsValue.innerHTML = timerCount;
   enemyCountResultsValue.innerHTML = enemiesPassedCount;
   bestTimerCountResultsValue.innerHTML = bestTimeRes;
   bestEnemyCountResultsValue.innerHTML = bestEnemiesPassedRes;

   if (comparisonResBetterOrNot()) {
      winOrLooseResultsValue.classList.add('congrats');
      winOrLooseResultsValue.innerHTML = '–í—ã –ø–æ–±–µ–¥–∏–ª–∏!';
      statusLoosOrWin = "win";
      winForResults = 1;
      updateWinBonus();
      updateExperience();
      saveGameResults();
   } else {
      winOrLooseResultsValue.classList.add('loose');
      winOrLooseResultsValue.innerHTML = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!';
   }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function comparisonResBetterOrNot() {
   return enemiesPassedCount > bestEnemiesPassedRes;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
BUTTON_START.onclick = function () {
   document.querySelector('.start-menu').classList.add('activated');
   BUTTON_START.classList.add('activated');
   if (BUTTON_START.classList.contains('activated')) {
      startGame();
   }
};

gameContainer.addEventListener("touchmove", movePlayer);







function createBoost() {
    if (isGameOver) return;

    const boost = document.createElement("div");
    const boostType = boostTypes[Math.floor(Math.random() * boostTypes.length)];
    boost.classList.add("boost", boostType);

    if (boostType === "boost-container") {
        for (let i = 0; i < 3; i++) {
            const triangle = document.createElement("div");
            triangle.classList.add("triangle");
            boost.appendChild(triangle);
        }
    }

    // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å–ª—É—á–∞–π–Ω–æ –ø–æ —à–∏—Ä–∏–Ω–µ, –Ω–æ —Å–≤–µ—Ä—Ö—É)
    boost.style.left = `${Math.random() * (gameContainer.clientWidth - 50)}px`;
    boost.style.top = `-50px`; // –ù–∞—á–∏–Ω–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É

    gameContainer.appendChild(boost);

	let fallSpeed = Math.random() * 1 + 1.8; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è (—Ä–∞–Ω–¥–æ–º –æ—Ç 1 –¥–æ 1.8 –ø–∏–∫—Å–µ–ª–µ–π)

	function fall() {
        if (isGameOver || !boost.parentElement) return;

        let currentTop = parseFloat(boost.style.top);
        boost.style.top = `${currentTop + fallSpeed}px`;

        if (currentTop < gameContainer.clientHeight) {
            requestAnimationFrame(fall);
        } else {
            boost.remove(); // –£–¥–∞–ª—è–µ–º –±—É—Å—Ç, –µ—Å–ª–∏ –æ–Ω —É–ø–∞–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        }
    }

    requestAnimationFrame(fall);

    // –ë—É—Å—Ç –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–µ –±—ã–ª –ø–æ–¥–æ–±—Ä–∞–Ω
    setTimeout(() => {
        if (boost.parentElement) {
            boost.remove();
        }
    }, 10000);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —Å –±—É—Å—Ç–∞–º–∏
function checkBoostCollision() {
    const boosts = document.querySelectorAll(".boost");
    boosts.forEach(boost => {
        const playerPosition = player.getBoundingClientRect();
        const boostPosition = boost.getBoundingClientRect();

        if (
            playerPosition.bottom >= boostPosition.top &&
            playerPosition.top <= boostPosition.bottom &&
            playerPosition.right >= boostPosition.left &&
            playerPosition.left <= boostPosition.right
        ) {
            if (boost.classList.contains("heart")) {
                applyHeartBoost();
            } else if (boost.classList.contains("boost-container")) {
                applySpeedBoost();
            }
            if (boost.parentElement) {
                boost.remove(); // –£–¥–∞–ª—è–µ–º –±—É—Å—Ç –ø–æ—Å–ª–µ –ø–æ–¥–±–æ—Ä–∞
            }
        }
    });
}

function applyHeartBoost() {
    playerLives++;
    console.log(`‚ù§Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∂–∏–∑–Ω—å! –ñ–∏–∑–Ω–∏: ${playerLives}`);
    updateLivesDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
}

// –í—ã–∑–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
updateLivesDisplay();

let speedBoostDuration = 0; // –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
let speedBoostTimers = []; // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤

function applySpeedBoost() {
    if (!isSpeedBoostActive) {
        isSpeedBoostActive = true;
        enemySpeed /= 2; // –ó–∞–º–µ–¥–ª—è–µ–º –≤—Ä–∞–≥–æ–≤
        console.log("üê¢ –í—Ä–∞–≥–∏ –∑–∞–º–µ–¥–ª–µ–Ω—ã!");
    }

    speedBoostDuration += 5000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
    console.log(`‚è≥ –ü—Ä–æ–¥–ª–µ–Ω–æ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ: ${speedBoostDuration / 1000} —Å–µ–∫.`);

    // –°–æ–∑–¥–∞—ë–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∞
    const boostTimer = setTimeout(() => {
        speedBoostDuration -= 5000; // –£–º–µ–Ω—å—à–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è

        if (speedBoostDuration <= 0) {
            enemySpeed *= 2; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞–≥–æ–≤
            isSpeedBoostActive = false;
            console.log("‚è≥ –í—Ä–µ–º—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!");
        }
    }, 5000);

    speedBoostTimers.push(boostTimer);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ø–∞–≤–Ω–∞ –±—É—Å—Ç–∞ (–æ—Ç 5 –¥–æ 30 —Å–µ–∫—É–Ω–¥)
function spawnBoostWithRandomInterval() {
    createBoost();
    const randomInterval = Math.random() * (30000 - 5000) + 5000; // –û—Ç 5 –¥–æ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(spawnBoostWithRandomInterval, randomInterval);
}

// –ó–∞–ø—É—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞ –±—É—Å—Ç–æ–≤
setTimeout(spawnBoostWithRandomInterval, Math.random() * (30000 - 5000) + 5000);

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–¥–±–æ—Ä –±—É—Å—Ç–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
gameContainer.addEventListener("touchmove", checkBoostCollision);

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function updateLivesDisplay() {
    livesCounter.textContent = playerLives;
}


// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function updateTimerDisplay() {
    timerDisplay.textContent = timerCount;
}
// –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
updateTimerDisplay();